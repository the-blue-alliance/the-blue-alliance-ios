default_platform :ios

platform :ios do

  desc "Install project dependencies"
  lane :install_deps do
    bundle_install # Update bundle deps
  end

  desc "Run TBA unit tests"
  lane :test_unit do
    scan(project: "the-blue-alliance-ios.xcodeproj", scheme: "tba-unit-tests")
  end

  desc "Run MyTBAKit unit tests"
  lane :test_mytbakit do
    spm(command: "test", package_path: "Packages/MyTBAKit")
  end

  desc "Run TBAData unit tests"
  lane :test_tbadata do
    spm(command: "test", package_path: "Packages/TBAData")
  end

  desc "Run TBAKit unit tests"
  lane :test_tbakit do
    spm(command: "test", package_path: "Packages/TBAKit")
  end

  desc "Run TBAOperation unit tests"
  lane :test_tbaoperation do
    spm(command: "test", package_path: "Packages/TBAOperation")
  end

  desc "Run TBAUtils unit tests"
  lane :test_tbautils do
    spm(command: "test", package_path: "Packages/TBAUtils")
  end

  desc "Run all of our tests"
  lane :test do
    test_mytbakit
    test_tbadata
    test_tbakit
    test_tbaoperation
    test_tbautils
    test_unit
  end

  ## CI Lanes ##

  desc "Setup Secrets.plist file (used by CI)"
  lane :setup_secrets do
    set_info_plist_value(path: "the-blue-alliance-ios/Secrets.plist", key: "tba_api_key", value: ENV["TBA_API_KEY"])
  end

  desc "Configure code signing"
  private_lane :configure_code_signing do
    if is_ci?
      match(
        git_url: "#{ENV["MATCH_GIT_REPO"]}",
        keychain_name: "fastlane_tmp_keychain",
        app_identifier: ["com.the-blue-alliance.tba"]
      )
    else
      match(
        app_identifier: ["com.the-blue-alliance.tba"]
      )
    end
  end

  ## Release Lanes ##

  desc "Upload a new beta build to TestFlight (for CI machine)"
  lane :beta_ci do
    setup_api
    prebeta
    build

    slack(channel: "#github-ios", message: "Shipping #{current_git_tag} to TestFlight...", default_payloads: [])
    pilot(beta_app_description: "TBA for iOS", changelog: commit_changelog, distribute_external: true, groups: ["Beta"], reject_build_waiting_for_review: true)
    slack(
      channel: "#github-ios",
      message: "#{current_git_tag} uploaded to TestFlight ðŸŽ‰",
      default_payloads: []
    )
  end

  desc "Upload a new build to the App Store"
  lane :app_store do
    setup_api
    preship
    build

    ship_github(is_prerelease: false) # Create GitHub release
    slack(
      channel: "#app-releases",
      message: "Shipping iOS #{current_version} to the App Store ðŸŽ‰\n```\n#{commit_changelog}\n```\nhttps://github.com/the-blue-alliance/the-blue-alliance-ios/releases/tag/#{current_version}",
      default_payloads: [],
      username: "release-bot",
      icon_url: "https://raw.githubusercontent.com/the-blue-alliance/the-blue-alliance-logo/master/ios/tba-icon-60%403x.png",
      attachment_properties: {}
    )
    deliver(
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false
      }
    )

    new_version(version_type: 'patch')
    beta_ci
  end

  private_lane :ship_github do |options|
   set_github_release(
     repository_name: "the-blue-alliance/the-blue-alliance-ios",
     api_token: ENV["GH_TOKEN"],
     name: current_version,
     tag_name: current_version,
     description: commit_changelog,
     is_prerelease: options[:is_prerelease] ? true : false,
     upload_assets: ["The Blue Alliance.ipa"]
   )
 end

  ## End Release Lanes ##

  ## Shipping Lanes for Release Lanes ##

  desc "Setup App Store Connect API Key"
  private_lane :setup_api do
    app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"]
    )
  end

  desc "Perform pre-TestFlight tasks"
  private_lane :prebeta do
    # Bump our build number for TestFlight
    testflight_build_number = latest_testflight_build_number(
      app_identifier: "com.the-blue-alliance.tba",
      version: get_version_number(target: "The Blue Alliance"),
      initial_build_number: 0
    )
    increment_build_number(build_number: testflight_build_number + 1)
  end

  desc "Perform pre-App Store tasks"
  private_lane :preship do
    # Set our build number to 99 for the App Store
    increment_build_number(build_number: 99)
  end

  desc "Perform codesign/build tasks"
  private_lane :build do
    configure_code_signing
    update_project_team(teamid: ENV["sigh_com.the-blue-alliance.tba_appstore_team-id"])
    update_project_provisioning(
      profile: ENV["sigh_com.the-blue-alliance.tba_appstore_profile-path"],
      target_filter: "The Blue Alliance",
      build_configuration: "Release",
      code_signing_identity: "iPhone Distribution"
    )
    gym(buildlog_path: "logs")
    # upload_symbols_to_crashlytics(dsym_path: "The Blue Alliance.app.dSYM.zip", gsp_path: "the-blue-alliance-ios/GoogleService-Info.plist")
  end

  ## End Shipping Lanes for Release Lanes ##

  ## Internal Lanes for Shipping Lanes ##

  private_lane :current_git_tag do
    "#{current_version}b#{get_build_number}"
  end

  private_lane :current_version do
    "v#{get_version_number(target: "The Blue Alliance")}"
  end

  private_lane :commit_changelog do
    changelog_from_git_commits(
      pretty: "%s",
      merge_commit_filtering: "exclude_merges"
    )
  end

  ## End Internal Lanes for Shipping Lanes ##

  ## Utility Lanes ##

  desc "Create a new app version (major, minor, patch) by bumping the version number"
  lane :new_version do |options|
    version_type = options[:version_type]
    # Bump version accordingly
    increment_version_number(bump_type: version_type)
    increment_build_number(build_number: 1)
  end

  lane :refresh_dsyms do
    setup_api
    download_dsyms(app_identifier: "com.the-blue-alliance.tba", min_version: "3.0.0")
    upload_symbols_to_crashlytics(gsp_path: "the-blue-alliance-ios/GoogleService-Info.plist")
    clean_build_artifacts           # Delete the local dSYM files
  end

  ## End Utility Lanes ##

end
